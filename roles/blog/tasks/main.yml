---
- name: Create the blog group
  group:
    name: "{{ blog_group }}"
    state: present

- name: Create the blog user
  user:
    name: "{{ blog_username }}"
    group: "{{ blog_group }}"
    system: yes
    createhome: yes
    shell: /usr/sbin/nologin
    state: present

- name: Create the working directory
  file:
    path: "{{ blog_path }}"
    owner: "{{ blog_username }}"
    group: "{{ blog_group }}"
    mode: 0755
    state: directory

- name: Clone the nwj.cc git repo into the working directory
  git:
    repo: "https://github.com/nwj/nwj.cc"
    dest: "{{ blog_path }}"
    version: master
    force: no
  become: yes
  become_user: "{{ blog_username }}"

# Ubuntu 16.04's version of hugo is over two years old, so we don't
# want to install through apt-get.
- name: Check if hugo is installed
  command: dpkg-query -l hugo
  failed_when: false
  changed_when: false
  register: package_check

- name: Download the hugo executable
  get_url:
    url: https://github.com/gohugoio/hugo/releases/download/v0.38.1/hugo_0.38.1_Linux-64bit.deb
    dest: "{{ blog_path }}"
  when: package_check.stderr.find('no packages found') != -1

- name: Install hugo
  apt:
    deb: "{{ blog_path }}/hugo_0.38.1_Linux-64bit.deb"
  when: package_check.stderr.find('no packages found') != -1

- name: Remove the downloaded hugo executable
  file:
    path: "{{ blog_path }}/hugo_0.38.1_Linux-64bit.deb"
    state: absent
  when: package_check.stderr.find('no packages found') != -1

- name: Install nodejs and npm
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - nodejs
    - npm

# Apparently required to get ubuntu 16.04's crusty version of node working with all of this.
- name: Link nodejs to node
  file:
    src: "/usr/bin/nodejs"
    dest: "/usr/bin/node"
    state: link

- name: Install postcss, cssnext, postcss-normalize, cssnano, and html-minifier
  npm:
    name: "{{ item }}"
    global: yes
    state: present
  with_items:
    - postcss-cli
    - cssnext
    - postcss-cssnext
    - postcss-normalize
    - cssnano
    - html-minifier

# This is necessary with the MD5_COMMAND param on make because ubuntu has md5sum, rather than md5 on macos
- name: Create the md5 script
  copy:
    src: md5.sh
    dest: "{{ blog_path }}"
    owner: "{{ blog_username }}"
    group: "{{ blog_group }}"
    mode: 0755

- name: Build the site
  make:
    chdir: "{{ blog_path }}"
    params:
      MD5_COMMAND: ./md5.sh

- name: Add the certbot repo
  apt_repository:
    repo: "ppa:certbot/certbot"
    state: present

- name: Install nginx, certbot, and the nginx plugin
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - nginx
    - certbot
    - python-certbot-nginx

- name: Open port 80
  ufw:
    rule: allow
    port: 80
    proto: tcp

- name: Open port 443
  ufw:
    rule: allow
    port: 443
    proto: tcp

- name: Check if a letsencrypt certificate already exists.
  stat:
    path: /etc/letsencrypt/live/{{ blog_domain }}/cert.pem
  register: blog_cert

- name: Get a default nginx config in place for letsencrypt
  template:
    src: nginx_default.jinja2
    dest: "/etc/nginx/sites-enabled/default"
  when: not blog_cert.stat.exists

- name: Restart nginx
  service:
    name: nginx
    state: restarted
  when: not blog_cert.stat.exists

- name: Generate a new certificate through letsencrypt
  command: "certbot certonly --nginx --noninteractive --agree-tos --email {{ blog_cert_email}} -d {{ blog_domain }}"
  when: not blog_cert.stat.exists

- name: Generate a new certificate through letsencrypt for the www version of the domain.
  command: "certbot certonly --nginx --noninteractive --agree-tos --email {{ blog_cert_email}} -d www.{{ blog_domain }}"
  when: not blog_cert.stat.exists

- name: Schedule certificate auto-renewal
  cron:
    name: blog certificate auto-renewal.
    job: "certbot renew --quiet --no-self-upgrade"
    special_time: daily
    state: present

- name: Remove the default nginx config
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: restart nginx

- name: Create the nginx config
  template: 
    src: nginx.jinja2
    dest: "/etc/nginx/sites-available/blog"
  notify: restart nginx

- name: Link the nginx config into sites-enabled
  file:
    src: "/etc/nginx/sites-available/blog"
    dest: "/etc/nginx/sites-enabled/blog"
    state: link
  notify: restart nginx
