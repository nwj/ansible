---
- name: Create the blog group
  group:
    name: "{{ blog_group }}"
    state: present

- name: Create the blog user
  user:
    name: "{{ blog_username }}"
    group: "{{ blog_group }}"
    system: yes
    createhome: yes
    shell: /usr/sbin/nologin
    state: present

- name: Create the working directory
  file:
    path: "{{ blog_path }}"
    owner: "{{ blog_username }}"
    group: "{{ blog_group }}"
    mode: 0755
    state: directory

- name: Clone the nwj.cc git repo into the working directory
  git:
    repo: "https://github.com/nwj/nwj.cc"
    dest: "{{ blog_path }}"
    version: master
    force: no
  become: yes
  become_user: "{{ blog_username }}"

  # Ubuntu 18.04's doesn't maintain an up to date version of hugo and there isn't a good outside repo to add
  # either. So, we install manually...sign.
- name: Check if hugo is installed
  command: dpkg-query -l hugo
  failed_when: false
  changed_when: false
  register: package_check

- name: Download the hugo executable
  get_url:
    url: https://github.com/gohugoio/hugo/releases/download/v0.60.1/hugo_0.60.1_Linux-64bit.deb
    dest: "{{ blog_path }}"
  when: package_check.stderr.find('no packages found') != -1

- name: Install hugo
  apt:
    deb: "{{ blog_path }}/hugo_0.60.1_Linux-64bit.deb"
  when: package_check.stderr.find('no packages found') != -1

- name: Remove the downloaded hugo executable
  file:
    path: "{{ blog_path }}/hugo_0.60.1_Linux-64bit.deb"
    state: absent
  when: package_check.stderr.find('no packages found') != -1

- name: Add Nodesource apt key
  apt_key:
    url: "https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
    state: present

- name: Add NodeSource repositories for Node.js
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items:
    - "deb https://deb.nodesource.com/node_{{ nodejs_version }} {{ ansible_distribution_release }} main"
    - "deb-src https://deb.nodesource.com/node_{{ nodejs_version }} {{ ansible_distribution_release }} main"
  register: node_repo

- name: Update apt cache if repo was added
  apt:
    update_cache: yes
  when: node_repo.changed

- name: Ensure Node.js and npm are installed
  apt: 
    name: "nodejs={{ nodejs_version|regex_replace('x', '') }}*"
    state: present

- name: Add Yarn apt key
  apt_key:
    url: "https://dl.yarnpkg.com/debian/pubkey.gpg"
    state: present

- name: Add Yarn repositories
  apt_repository:
    repo: "deb https://dl.yarnpkg.com/debian/ stable main"
    state: present
  register: yarn_repo

- name: Update apt cache if repo was added
  apt:
    update_cache: yes
  when: yarn_repo.changed

- name: Install yarn
  apt: 
    name: yarn
    state: present

- name: Install build dependencies with yarn install
  yarn:
    path: "{{ blog_path }}"
  become: yes
  become_user: "{{ blog_username }}"

- name: Build the site with hugo
  command: "hugo --minify"
  become: yes
  become_user: "{{ blog_username }}"
  args:
    chdir: "{{ blog_path }}"
    creates: "{{ blog_path }}/public"

- name: Install nginx, certbot, and the nginx plugin
  apt:
    name: 
      - nginx
      - certbot
      - python-certbot-nginx
    state: present

- name: Open port 80
  ufw:
    rule: allow
    port: 80
    proto: tcp

- name: Open port 443
  ufw:
    rule: allow
    port: 443
    proto: tcp

- name: Check if a letsencrypt certificate already exists.
  stat:
    path: /etc/letsencrypt/live/{{ blog_domain }}/cert.pem
  register: blog_cert

- name: Get a default nginx config in place for letsencrypt
  template:
    src: nginx_default.jinja2
    dest: "/etc/nginx/sites-enabled/default"
  when: not blog_cert.stat.exists

- name: Restart nginx
  service:
    name: nginx
    state: restarted
  when: not blog_cert.stat.exists

- name: Generate a new certificate through letsencrypt
  command: "certbot certonly --nginx --noninteractive --agree-tos --email {{ blog_cert_email}} -d {{ blog_domain }}"
  when: not blog_cert.stat.exists

- name: Generate a new certificate through letsencrypt for the www version of the domain.
  command: "certbot certonly --nginx --noninteractive --agree-tos --email {{ blog_cert_email}} -d www.{{ blog_domain }}"
  when: not blog_cert.stat.exists

- name: Schedule certificate auto-renewal
  cron:
    name: blog certificate auto-renewal.
    job: "certbot renew --quiet --no-self-upgrade"
    special_time: daily
    state: present

- name: Remove the default nginx config
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  notify: restart nginx

- name: Create the nginx config
  template: 
    src: nginx.jinja2
    dest: "/etc/nginx/sites-available/blog"
  notify: restart nginx

- name: Link the nginx config into sites-enabled
  file:
    src: "/etc/nginx/sites-available/blog"
    dest: "/etc/nginx/sites-enabled/blog"
    state: link
  notify: restart nginx
