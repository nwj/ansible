---
- name: Create the taskd group
  group:
    name: "{{ taskd_group }}"
    state: present 

- name: Create the taskd user
  user:
    name: "{{ taskd_username }}"
    group: "{{ taskd_group }}"
    system: yes
    createhome: no
    shell: /usr/sbin/nologin
    state: present

- name: Install taskd
  apt:
    name: taskd
    state: present

- name: Create data folder for taskd
  file:
    path: "{{ taskd_data_path }}"
    owner: "{{ taskd_username }}"
    group: "{{ taskd_group }}"
    mode: 0700
    state: directory

- name: Set TASKDDATA environment variable
  lineinfile:
    dest: "/etc/profile"
    regexp: "^export TASKDDATA="
    line: "export TASKDDATA={{ taskd_data_path }}"
    state: present
    insertafter: eof

- name: Initialize the data folder
  command: "taskd init"
  args:
    creates: "{{ taskd_data_path }}/config"
  environment:
    TASKDDATA: "{{ taskd_data_path }}"
  become: yes
  become_user: "{{ taskd_username }}"

- name: Create the config file for taskd
  template:
    src: taskd_config.jinja2
    dest: "{{ taskd_data_path }}/config"
    owner: "{{ taskd_username }}"
    group: "{{ taskd_group }}"

- name: Add the certbot repo
  apt_repository:
    repo: "ppa:certbot/certbot"
    state: present

- name: Install nginx, certbot, and the nginx plugin
  apt:
    name: "{{ item }}"
    state: present
  with_items:
    - nginx
    - certbot
    - python-certbot-nginx

- name: Open port 80
  ufw:
    rule: allow
    port: 80
    proto: tcp

- name: Open port 443
  ufw:
    rule: allow
    port: 443
    proto: tcp

- name: Check if a letsencrypt certificate already exists.
  stat:
    path: /etc/letsencrypt/live/{{ taskd_domain }}/cert.pem
  register: taskd_cert

- name: Get a default nginx config in place for letsencrypt
  template:
    src: nginx_default.jinja2
    dest: "/etc/nginx/sites-enabled/default"
  when: not taskd_cert.stat.exists

- name: Restart nginx
  service:
    name: nginx
    state: restarted
  when: not taskd_cert.stat.exists

- name: Generate a new certificate through letsencrypt
  command: "certbot certonly --nginx --noninteractive --agree-tos --email {{ taskd_cert_email }} -d {{ taskd_domain }}"
  when: not taskd_cert.stat.exists

- name: Get the renewal hook script in place
  template:
    src: renew-hook.sh.jinja2
    dest: "{{ taskd_data_path }}/renew-hook.sh"
    owner: root
    group: root
    mode: 0700

- name: Schedule certificate auto-renewal
  cron:
    name: taskd certificate auto-renewal.
    job: "certbot renew --quiet --no-self-upgrade --deploy-hook {{ taskd_data_path }}/renew-hook.sh"
    special_time: daily
    state: present

- name: Create a certs folder in the data folder
  file:
    path: "{{ taskd_data_path }}/certs"
    owner: "{{ taskd_username }}"
    group: "{{ taskd_group }}"
    mode: 0700
    state: directory

- name: Copy the letsencrypt certs into the data folder
  copy:
    src: "/etc/letsencrypt/live/{{ taskd_domain }}/{{ item }}"
    dest: "{{ taskd_data_path }}/certs/{{ item }}"
    owner: "{{ taskd_username }}"
    group: "{{ taskd_group }}"
    mode: 0700
    remote_src: yes
  with_items:
    - privkey.pem
    - fullchain.pem

- name: Copy the scripts for generating the ca and client certs into the data folder
  copy:
    src: "/usr/share/taskd/pki/{{ item }}"
    dest: "{{ taskd_data_path }}/certs/{{ item }}"
    owner: "{{ taskd_username }}"
    group: "{{ taskd_group }}"
    mode: 0700
    remote_src: yes
  with_items:
    - generate.ca
    - generate.client

- name: Copy the vars for generating the ca cert into the data folder
  template:
    src: self_signing_vars.jinja2
    dest: "{{ taskd_data_path }}/certs/vars"
    owner: "{{ taskd_username }}"
    group: "{{ taskd_group }}"

- name: Generate the self-signed ca cert and key
  shell: ./generate.ca
  args:
    creates: "{{ taskd_data_path }}/certs/ca.key.pem"
    chdir: "{{ taskd_data_path }}/certs"
  become: yes
  become_user: "{{ taskd_username }}"

- name: Open the taskd port
  ufw:
    rule: allow
    port: "{{ taskd_port }}"
    proto: tcp

- name: Create a systemd script for the taskd service
  template:
    src: taskd.service.jinja2
    dest: /lib/systemd/system/taskd.service
    owner: root
    group: root
    mode: 0644

- name: Enable and start the taskd service
  systemd:
    name: taskd
    enabled: yes
    state: started
    daemon_reload: yes

- name: Create the users folder in the data folder
  file:
    path: "{{ taskd_data_path }}/users"
    owner: "{{ taskd_username }}"
    group: "{{ taskd_group }}"
    mode: 0700
    state: directory

- name: Check if users.conf exists
  stat:
    path: "{{ taskd_data_path }}/users/users.conf"
  register: taskd_users_conf_check

- name: Create the users.conf file in the users folder
  file:
    path: "{{ taskd_data_path }}/users/users.conf"
    owner: "{{ taskd_username }}"
    group: "{{ taskd_group }}"
    mode: 0700
    state: touch
  when: not taskd_users_conf_check.stat.exists

- name: Read contents of users.conf
  command: "cat {{ taskd_data_path }}/users/users.conf"
  register: taskd_users_conf
  changed_when: false

- name: Add the client organization
  command: "taskd add org '{{ taskwarrior_org }}'"
  environment:
    TASKDDATA: "{{ taskd_data_path }}"
  become: yes
  become_user: "{{ taskd_username }}"
  when: taskd_users_conf.stdout.find(taskwarrior_org) == -1

- name: Add the client user
  command: "taskd add user '{{ taskwarrior_org }}' '{{ taskwarrior_user }}'"
  environment:
    TASKDDATA: "{{ taskd_data_path }}"
  register: taskwarrior_user_key
  become: yes
  become_user: "{{ taskd_username }}"
  when: taskd_users_conf.stdout.find(taskwarrior_user) == -1

- name: Append the client user information to users.conf
  blockinfile:
    dest: "{{ taskd_data_path }}/users/users.conf"
    state: present
    insertafter: BOF
    block: |
      Name: {{ taskwarrior_user}}
      Organization: {{ taskwarrior_org }}
      User key: {{ taskwarrior_user_key.stdout[14:] }}
    marker: "# {mark} {{ taskwarrior_user }}"
  when: taskd_users_conf.stdout.find(taskwarrior_user) == -1

- name: Generate the client certs
  shell: "./generate.client {{ taskwarrior_user|replace(' ', '_') }}"
  args:
    creates: "{{ taskd_data_path }}/certs/{{ taskwarrior_user|replace(' ', '_') }}.key.pem"
    chdir: "{{ taskd_data_path }}/certs"
  become: yes
  become_user: "{{ taskd_username }}"

  # We don't fetch the ca cert, because our ca is letsencrypt with this setup.
  # Their cert is at https://letsencrypt.org/certificates/.
  # In the past the one to use has been the X3 Cross-Signed Intermediate cert.
- name: Fetch the client information down from the server
  fetch:
    src: "{{ taskd_data_path }}/{{ item }}"
    dest: "~/tmp/"
    flat: yes
  with_items:
    - "users/users.conf"
    - "certs/{{ taskwarrior_user|replace(' ', '_') }}.key.pem"
    - "certs/{{ taskwarrior_user|replace(' ', '_') }}.cert.pem"


